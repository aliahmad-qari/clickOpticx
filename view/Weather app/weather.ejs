<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Weather</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="vendors/feather/feather.css">
    <link rel="stylesheet" href="vendors\ti-icons\css\themify-icons.css">
    <link rel="stylesheet" href="vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <link rel="stylesheet" href="vendors/datatables.net-bs4/dataTables.bootstrap4.css">
    <link rel="stylesheet" href="vendors\ti-icons\css\themify-icons.css">
    <link rel="stylesheet" type="text/css" href="js/select.dataTables.min.css">
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <link rel="stylesheet" href="css/vertical-layout-light/style.css">
    <!-- endinject -->
    <link rel="shortcut icon" href="images/favicon.png" />

    <!-- Material Design Icons CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">

    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@7.2.96/css/materialdesignicons.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        .card {
            width: 90%;
            max-width: 470px;
            background: linear-gradient(135deg, #00feba, #5b548a);
            color: #fff;

            border-radius: 20px;
            padding: 40px 35px;
            text-align: center;
        }

        .search {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .search input {
            border: 0;
            outline: 0;
            background: #ebfffc;
            color: #555;
            padding: 10px 25px;
            height: 60px;
            border-radius: 30px;
            flex: 1;
            margin-right: 16px;
            font-size: 18px;
        }

        .search button {
            border: 0;
            outline: 0;
            background: #ebfffc;
            border-radius: 50px;
            width: 60px;
            height: 60px;
            cursor: pointer;
        }

        .search button img {
            width: 16px;
        }

        .weather-icon {
            width: 170px;
            margin-top: 30px;
        }

        .weather h1 {
            font-size: 80px;
            font-weight: 500;
        }

        .weather h2 {
            font-size: 45px;
            font-weight: 400;
            margin-top: -10px;
        }

        .details {
            display: flex;
            justify-content: space-between;
            padding: 0px 20px;
            margin-top: 50px;
        }

        .col {
            display: flex;
            align-items: center;
            text-align: left;
        }

        .col img {
            width: 40px;
            margin-right: 10px;
        }

        .humidity,
        .wind {
            font-size: 28px;
            margin-top: -6px;
        }

        .loading {
            display: none;
            margin-top: 20px;
            font-size: 18px;
            color: #fff;
        }
    </style>
</head>

<body>
    <div class="container-scroller">
        <!-- partial:partials/_navbar -->
        <%- include ('../partials/_navbar.ejs') %>
            <div class="container-fluid page-body-wrapper">
              >
                <!-- ✅ Unified Modern Sidebar for Tasbeeh -->
<nav class="modern-sidebar" id="sidebar">
  <div class="sidebar-header">
    <h1 class="sidebar-title">القرآن الكريم</h1>
    <p class="sidebar-subtitle">Tasbeeh Counter</p>
  </div>
  <nav class="sidebar-nav">
    <ul style="list-style: none; padding: 0; margin: 0;">
      <li class="nav-item">
        <a class="nav-link" href="/index">
          <i class="bi bi-grid"></i>
          <span>Dashboard</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/package">
          <i class="bi bi-box-seam"></i>
          <span>All Packages</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/History">
          <i class="bi bi-clock-history"></i>
          <span>History</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/complaint">
          <i class="bi bi-wallet2"></i>
          <span>Wallet</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/profile">
          <i class="bi bi-person"></i>
          <span>Profile</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/contactus">
          <i class="bi bi-telephone"></i>
          <span>Contact Us</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/changepassword">
          <i class="bi bi-lock"></i>
          <span>Change Password</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/logout">
          <i class="bi bi-box-arrow-right"></i>
          <span>Logout</span>
        </a>
      </li>
    </ul>
  </nav>
</nav>

                <!-- NavBar End -->

                <div class="main-panel">
    <style>
        /* ✅ Sidebar Styling */
.modern-sidebar {
  width: 320px;
  background: linear-gradient(180deg, rgba(30, 41, 59, 0.95), rgba(51, 65, 85, 0.9));
  backdrop-filter: blur(25px);
  border-right: 1px solid rgba(16, 185, 129, 0.2);
  box-shadow: 8px 0 32px -8px rgba(0, 0, 0, 0.3), inset -1px 0 0 rgba(16, 185, 129, 0.1);
  z-index: 10;
}

.sidebar-header {
  padding: 2.5rem 2rem;
  text-align: center;
  border-bottom: 1px solid rgba(16, 185, 129, 0.2);
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(79, 70, 229, 0.05));
}

.sidebar-title {
  font-size: 1.75rem;
  font-family: 'Amiri', serif;
  font-weight: 900;
  background: linear-gradient(135deg, #10b981, #34d399, #6ee7b7);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 0.75rem;
  text-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
}

.sidebar-subtitle {
  color: #94a3b8;
  font-size: 1rem;
  font-weight: 600;
  letter-spacing: 0.025em;
}

.sidebar-nav .nav-link {
  display: flex;
  align-items: center;
  padding: 1rem 1.25rem;
  color: #cbd5e1;
  text-decoration: none;
  border-radius: 16px;
  font-weight: 600;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.sidebar-nav .nav-link i {
  margin-right: 1rem;
  font-size: 1.2rem;
  transition: transform 0.3s ease;
}

.sidebar-nav .nav-link::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.1), transparent);
  transition: left 0.4s ease;
}

.sidebar-nav .nav-link:hover::before {
  left: 100%;
}

.sidebar-nav .nav-link:hover {
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.15), rgba(79, 70, 229, 0.1));
  color: #10b981;
  transform: translateX(6px);
  box-shadow: 0 4px 12px -2px rgba(16, 185, 129, 0.2);
}

.sidebar-nav .nav-link:hover i {
  transform: scale(1.1);
  color: #34d399;
}

        /* Professional Dark Weather UI Design */
        .weather-container {
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 30%, #16213e 70%, #0f3460 100%);
            min-height: 100vh;
            position: relative;
            overflow: hidden;
            padding: 2rem 1rem;
        }

        .weather-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 20%, rgba(79, 70, 229, 0.12) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(139, 92, 246, 0.08) 0%, transparent 50%),
                radial-gradient(circle at 40% 60%, rgba(16, 185, 129, 0.06) 0%, transparent 70%),
                url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="weather-pattern" patternUnits="userSpaceOnUse" width="40" height="40"><circle cx="20" cy="20" r="1.5" fill="rgba(79,70,229,0.08)"/><circle cx="8" cy="8" r="1" fill="rgba(139,92,246,0.06)"/><circle cx="32" cy="12" r="0.8" fill="rgba(16,185,129,0.05)"/><circle cx="5" cy="30" r="0.9" fill="rgba(79,70,229,0.07)"/></pattern></defs><rect width="100" height="100" fill="url(%23weather-pattern)"/></svg>') center/180px;
            pointer-events: none;
        }

        .weather-app {
            max-width: 800px;
            margin: 0 auto;
            position: relative;
            z-index: 10;
        }

        /* Header Section */
        .weather-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .app-title {
            font-size: 2.5rem;
            font-weight: 900;
            margin-bottom: 0.75rem;
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 50%, #ec4899 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 4px 8px rgba(79, 70, 229, 0.3);
            letter-spacing: -0.025em;
        }

        .app-subtitle {
            font-size: 1.125rem;
            color: #94a3b8;
            margin-bottom: 0;
            font-weight: 500;
            letter-spacing: 0.025em;
        }

        /* Search Section */
        .search-section {
            background: linear-gradient(145deg, rgba(30, 41, 59, 0.95) 0%, rgba(51, 65, 85, 0.9) 100%);
            backdrop-filter: blur(25px);
            border-radius: 24px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(79, 70, 229, 0.3);
            box-shadow: 
                0 20px 40px -8px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(139, 92, 246, 0.2),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .search-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #4f46e5, #7c3aed, #ec4899);
            border-radius: 24px 24px 0 0;
        }

        .search-wrapper {
            display: flex;
            gap: 1rem;
            align-items: end;
        }

        .search-input-group {
            flex: 1;
        }

        .search-label {
            display: block;
            font-size: 0.875rem;
            font-weight: 600;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .search-input {
            width: 100%;
            padding: 0.875rem 1rem 0.875rem 2.5rem;
            border: 2px solid rgba(79, 70, 229, 0.3);
            border-radius: 16px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(30, 41, 59, 0.8);
            color: #e2e8f0;
            box-shadow: 
                0 4px 6px -1px rgba(0, 0, 0, 0.2),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            position: relative;
        }

        .search-input::placeholder {
            color: #94a3b8;
        }

        .search-input:focus {
            border-color: #7c3aed;
            box-shadow: 
                0 0 0 3px rgba(124, 58, 237, 0.2),
                0 4px 12px -2px rgba(79, 70, 229, 0.3);
            outline: none;
            background: rgba(30, 41, 59, 0.9);
        }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #94a3b8;
            font-size: 1.125rem;
        }

        .search-btn {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            border: none;
            border-radius: 16px;
            padding: 0.875rem 1.5rem;
            color: white;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 
                0 8px 16px -4px rgba(79, 70, 229, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .search-btn:hover {
            transform: translateY(-3px);
            box-shadow: 
                0 12px 24px -6px rgba(79, 70, 229, 0.5),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }

        .location-btn {
            background: linear-gradient(135deg, #10b981 0%, #047857 100%);
            border: none;
            border-radius: 16px;
            padding: 0.875rem;
            color: white;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 
                0 8px 16px -4px rgba(16, 185, 129, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
        }

        .location-btn:hover {
            transform: translateY(-3px);
            box-shadow: 
                0 12px 24px -6px rgba(16, 185, 129, 0.5),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }

        /* Weather Card */
        .weather-card {
            background: linear-gradient(145deg, rgba(30, 41, 59, 0.95) 0%, rgba(51, 65, 85, 0.9) 100%);
            backdrop-filter: blur(25px);
            border-radius: 32px;
            padding: 3.5rem 2.5rem;
            box-shadow: 
                0 40px 80px -16px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(139, 92, 246, 0.2),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(79, 70, 229, 0.3);
        }

        .weather-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #4f46e5, #7c3aed, #ec4899);
            border-radius: 32px 32px 0 0;
        }

        /* Loading State */
        .loading-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #94a3b8;
        }

        .loading-spinner {
            width: 48px;
            height: 48px;
            border: 4px solid rgba(30, 41, 59, 0.3);
            border-radius: 50%;
            border-top-color: #7c3aed;
            animation: spin 1s ease-in-out infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Weather Display */
        .weather-main {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            align-items: center;
            margin-bottom: 2rem;
        }

        .weather-info {
            text-align: left;
        }

        .weather-location {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-shadow: 0 2px 4px rgba(79, 70, 229, 0.2);
        }

        .weather-date {
            color: #94a3b8;
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
            font-weight: 500;
        }

        .weather-temp {
            font-size: 4rem;
            font-weight: 900;
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 50%, #ec4899 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            line-height: 1;
            margin-bottom: 0.5rem;
            text-shadow: 0 4px 8px rgba(79, 70, 229, 0.2);
        }

        .weather-description {
            font-size: 1.125rem;
            color: #cbd5e1;
            text-transform: capitalize;
            margin-bottom: 0;
            font-weight: 500;
        }

        .weather-visual {
            text-align: center;
            position: relative;
        }

        .weather-icon-large {
            width: 200px;
            height: 200px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 8rem;
            background: linear-gradient(135deg, rgba(79, 70, 229, 0.15) 0%, rgba(124, 58, 237, 0.1) 100%);
            border-radius: 50%;
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(79, 70, 229, 0.3);
            box-shadow: 
                0 8px 32px -8px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .weather-icon-large::before {
            content: '';
            position: absolute;
            top: 20%;
            left: 20%;
            width: 60%;
            height: 60%;
            background: radial-gradient(circle, rgba(124, 58, 237, 0.2) 0%, transparent 70%);
            border-radius: 50%;
        }

        /* Weather Details Grid */
        .weather-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .detail-card {
            background: linear-gradient(145deg, rgba(51, 65, 85, 0.8) 0%, rgba(71, 85, 105, 0.6) 100%);
            border-radius: 20px;
            padding: 1.75rem;
            text-align: center;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(79, 70, 229, 0.2);
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 8px 16px -4px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .detail-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(124, 58, 237, 0.2), transparent);
            transition: left 0.6s ease;
        }

        .detail-card:hover::before {
            left: 100%;
        }

        .detail-card:hover {
            transform: translateY(-4px) scale(1.02);
            box-shadow: 
                0 16px 32px -8px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(124, 58, 237, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.15);
            border-color: rgba(124, 58, 237, 0.4);
        }

        .detail-icon {
            width: 48px;
            height: 48px;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            border-radius: 12px;
            color: white;
            box-shadow: 
                0 4px 8px -2px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .detail-card:hover .detail-icon {
            transform: scale(1.1) rotate(5deg);
            box-shadow: 
                0 8px 16px -4px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }

        .humidity-icon { background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); }
        .wind-icon { background: linear-gradient(135deg, #10b981 0%, #047857 100%); }
        .pressure-icon { background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); }
        .visibility-icon { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); }

        .detail-label {
            font-size: 0.875rem;
            color: #94a3b8;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 600;
        }

        .detail-value {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0;
        }

        /* Error State */
        .error-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #fca5a5;
        }

        .error-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .error-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #fca5a5 0%, #f87171 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .error-message {
            color: #94a3b8;
            margin-bottom: 0;
            font-weight: 500;
        }

        /* Forecast Section */
        .forecast-section {
            margin-top: 2rem;
        }

        .forecast-header {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .forecast-title {
            font-size: 1.75rem;
            font-weight: 800;
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 50%, #ec4899 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .forecast-subtitle {
            color: #94a3b8;
            font-size: 1rem;
            margin-bottom: 0;
            font-weight: 500;
        }

        .forecast-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .forecast-card {
            background: linear-gradient(145deg, rgba(51, 65, 85, 0.8) 0%, rgba(71, 85, 105, 0.6) 100%);
            border-radius: 20px;
            padding: 1.5rem 1rem;
            text-align: center;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(79, 70, 229, 0.2);
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 8px 16px -4px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .forecast-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(124, 58, 237, 0.2), transparent);
            transition: left 0.6s ease;
        }

        .forecast-card:hover::before {
            left: 100%;
        }

        .forecast-card:hover {
            transform: translateY(-4px) scale(1.02);
            box-shadow: 
                0 16px 32px -8px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(124, 58, 237, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.15);
            border-color: rgba(124, 58, 237, 0.4);
        }

        .forecast-day {
            font-size: 0.875rem;
            color: #94a3b8;
            margin-bottom: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .forecast-icon {
            font-size: 2.5rem;
            margin: 0.75rem 0;
            display: block;
        }

        .forecast-temps {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.75rem;
        }

        .forecast-high {
            font-size: 1rem;
            font-weight: 700;
            background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .forecast-low {
            font-size: 0.875rem;
            color: #94a3b8;
            font-weight: 500;
        }

        .forecast-condition {
            font-size: 0.75rem;
            color: #cbd5e1;
            margin-top: 0.5rem;
            text-transform: capitalize;
            line-height: 1.2;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .weather-app {
                margin: 1rem;
            }
            
            .app-title {
                font-size: 2rem;
            }
            
            .search-wrapper {
                flex-direction: column;
                align-items: stretch;
                gap: 1rem;
            }
            
            .weather-main {
                grid-template-columns: 1fr;
                text-align: center;
                gap: 1.5rem;
            }
            
            .weather-temp {
                font-size: 3rem;
            }
            
            .weather-icon-large {
                width: 150px;
                height: 150px;
                font-size: 6rem;
            }
            
            .weather-details {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
            }
            
            .detail-card {
                padding: 1rem;
            }
            
            .forecast-grid {
                grid-template-columns: repeat(3, 1fr);
                gap: 0.75rem;
            }
            
            .forecast-card {
                padding: 1rem 0.75rem;
            }
        }

        @media (max-width: 480px) {
            .weather-details {
                grid-template-columns: 1fr;
            }
            
            .forecast-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>

    <div class="weather-container">
        <div class="weather-app">
            <div class="weather-header">
                <h1 class="app-title">Weather Dashboard</h1>
                <p class="app-subtitle">Get real-time weather information for any location</p>
            </div>

            <div class="search-section">
                <div class="search-wrapper">
                    <div class="search-input-group" style="position: relative;">
                        <label for="search-input" class="search-label">Search Location</label>
                        <i class="bi bi-geo-alt search-icon"></i>
                        <input type="text" id="search-input" class="search-input" placeholder="Enter city name (e.g., Karachi, London)" spellcheck="false">
                    </div>
                    <button class="search-btn" onclick="searchWeather()">
                        <i class="bi bi-search"></i>
                        Search
                    </button>
                    <button class="location-btn" onclick="getCurrentLocation()" title="Use current location">
                        <i class="bi bi-crosshair"></i>
                    </button>
                </div>
            </div>

            <div class="weather-card">
                <!-- Loading State -->
                <div id="loading-state" class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>Detecting your location and fetching weather data...</p>
                </div>

                <!-- Weather Display -->
                <div id="weather-display" class="weather-content" style="display: none;">
                    <div class="weather-main">
                        <div class="weather-info">
                            <div class="weather-location">
                                <i class="bi bi-geo-alt-fill"></i>
                                <span id="location-name">--</span>
                            </div>
                            <div class="weather-date" id="current-date">--</div>
                            <div class="weather-temp" id="temperature">--°</div>
                            <div class="weather-description" id="weather-condition">--</div>
                        </div>
                        <div class="weather-visual">
                            <div class="weather-icon-large" id="weather-icon">
                                🌤️
                            </div>
                        </div>
                    </div>

                    <div class="weather-details">
                        <div class="detail-card">
                            <div class="detail-icon humidity-icon">
                                <i class="bi bi-droplet-fill"></i>
                            </div>
                            <div class="detail-label">Humidity</div>
                            <div class="detail-value" id="humidity">--%</div>
                        </div>
                        <div class="detail-card">
                            <div class="detail-icon wind-icon">
                                <i class="bi bi-wind"></i>
                            </div>
                            <div class="detail-label">Wind Speed</div>
                            <div class="detail-value" id="wind-speed">-- km/h</div>
                        </div>
                        <div class="detail-card">
                            <div class="detail-icon pressure-icon">
                                <i class="bi bi-speedometer2"></i>
                            </div>
                            <div class="detail-label">Pressure</div>
                            <div class="detail-value" id="pressure">-- mb</div>
                        </div>
                        <div class="detail-card">
                            <div class="detail-icon visibility-icon">
                                <i class="bi bi-eye-fill"></i>
                            </div>
                            <div class="detail-label">Visibility</div>
                            <div class="detail-value" id="visibility">-- km</div>
                        </div>
                    </div>
                </div>

                <!-- 7-Day Forecast Section -->
                <div id="forecast-section" class="forecast-section" style="display: none;">
                    <div class="forecast-header">
                        <h3 class="forecast-title">7-Day Forecast</h3>
                        <p class="forecast-subtitle">Extended weather outlook</p>
                    </div>
                    <div class="forecast-grid" id="forecast-grid">
                        <!-- Forecast cards will be populated here -->
                    </div>
                </div>

                <!-- Error State -->
                <div id="error-state" class="error-state" style="display: none;">
                    <div class="error-icon">⚠️</div>
                    <h3 class="error-title">Unable to fetch weather data</h3>
                    <p class="error-message" id="error-message">Please check your internet connection and try again.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const apiKey = "f2d781b13e5a447892774059252105";
        const apiUrl = "https://api.weatherapi.com/v1/current.json?key=" + apiKey + "&q=";
        const forecastUrl = "https://api.weatherapi.com/v1/forecast.json?key=" + apiKey + "&days=7&q=";

        // DOM elements
        const loadingState = document.getElementById('loading-state');
        const weatherDisplay = document.getElementById('weather-display');
        const errorState = document.getElementById('error-state');
        const searchInput = document.getElementById('search-input');
        const forecastSection = document.getElementById('forecast-section');

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            updateDateTime();
            getCurrentLocation();
            
            // Search on Enter key
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchWeather();
                }
            });
        });

        function updateDateTime() {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };
            document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', options);
        }

        function showLoading(message = "Fetching weather data...") {
            loadingState.style.display = 'block';
            loadingState.querySelector('p').textContent = message;
            weatherDisplay.style.display = 'none';
            errorState.style.display = 'none';
        }

        function showWeather() {
            loadingState.style.display = 'none';
            weatherDisplay.style.display = 'block';
            forecastSection.style.display = 'block';
            errorState.style.display = 'none';
        }

        function showError(message) {
            loadingState.style.display = 'none';
            weatherDisplay.style.display = 'none';
            forecastSection.style.display = 'none';
            errorState.style.display = 'block';
            document.getElementById('error-message').textContent = message;
        }

        function updateForecast(forecastDays) {
            const forecastGrid = document.getElementById('forecast-grid');
            forecastGrid.innerHTML = '';

            forecastDays.forEach((day, index) => {
                const date = new Date(day.date);
                const dayName = index === 0 ? 'Today' : 
                    index === 1 ? 'Tomorrow' : 
                    date.toLocaleDateString('en-US', { weekday: 'short' });

                const forecastCard = document.createElement('div');
                forecastCard.className = 'forecast-card';
                
                forecastCard.innerHTML = `
                    <div class="forecast-day">${dayName}</div>
                    <div class="forecast-icon">${getWeatherIcon(day.day.condition.text)}</div>
                    <div class="forecast-temps">
                        <span class="forecast-high">${Math.round(day.day.maxtemp_c)}°</span>
                        <span class="forecast-low">${Math.round(day.day.mintemp_c)}°</span>
                    </div>
                    <div class="forecast-condition">${day.day.condition.text}</div>
                `;
                
                forecastGrid.appendChild(forecastCard);
            });
        }

        function getWeatherIcon(condition) {
            const conditionLower = condition.toLowerCase();
            
            if (conditionLower.includes('sunny') || conditionLower.includes('clear')) {
                return '☀️';
            } else if (conditionLower.includes('partly cloudy')) {
                return '⛅';
            } else if (conditionLower.includes('cloudy') || conditionLower.includes('overcast')) {
                return '☁️';
            } else if (conditionLower.includes('rain') || conditionLower.includes('shower')) {
                return '🌧️';
            } else if (conditionLower.includes('drizzle')) {
                return '🌦️';
            } else if (conditionLower.includes('thunder') || conditionLower.includes('storm')) {
                return '⛈️';
            } else if (conditionLower.includes('snow') || conditionLower.includes('blizzard')) {
                return '❄️';
            } else if (conditionLower.includes('mist') || conditionLower.includes('fog')) {
                return '🌫️';
            } else if (conditionLower.includes('wind')) {
                return '💨';
            } else if (conditionLower.includes('hail')) {
                return '🌨️';
            } else {
                return '🌤️';
            }
        }

        async function fetchWeatherData(location) {
            try {
                // Fetch current weather and forecast data
                const [currentResponse, forecastResponse] = await Promise.all([
                    fetch(apiUrl + encodeURIComponent(location) + "&aqi=yes"),
                    fetch(forecastUrl + encodeURIComponent(location) + "&aqi=yes")
                ]);
                
                if (!currentResponse.ok || !forecastResponse.ok) {
                    throw new Error("Location not found. Please check the spelling and try again.");
                }

                const [currentData, forecastData] = await Promise.all([
                    currentResponse.json(),
                    forecastResponse.json()
                ]);
                
                // Update UI with current weather data
                document.getElementById('location-name').textContent = 
                    `${currentData.location.name}, ${currentData.location.country}`;
                document.getElementById('temperature').textContent = 
                    `${Math.round(currentData.current.temp_c)}°`;
                document.getElementById('weather-condition').textContent = 
                    currentData.current.condition.text;
                document.getElementById('humidity').textContent = 
                    `${currentData.current.humidity}%`;
                document.getElementById('wind-speed').textContent = 
                    `${currentData.current.wind_kph} km/h`;
                document.getElementById('pressure').textContent = 
                    `${currentData.current.pressure_mb} mb`;
                document.getElementById('visibility').textContent = 
                    `${currentData.current.vis_km} km`;
                
                // Update weather icon
                const weatherIcon = document.getElementById('weather-icon');
                weatherIcon.textContent = getWeatherIcon(currentData.current.condition.text);
                
                // Update 7-day forecast
                updateForecast(forecastData.forecast.forecastday);
                
                showWeather();
                
            } catch (error) {
                console.error("Error fetching weather:", error);
                showError(error.message);
            }
        }

        function searchWeather() {
            const city = searchInput.value.trim();
            if (!city) {
                showError("Please enter a city name to search.");
                return;
            }
            
            showLoading(`Searching weather for ${city}...`);
            fetchWeatherData(city);
        }

        function getCurrentLocation() {
            if (!navigator.geolocation) {
                showError("Geolocation is not supported by this browser. Please search for a city manually.");
                return;
            }

            showLoading("Detecting your location...");
            
            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const { latitude, longitude } = position.coords;
                    const coordinates = `${latitude},${longitude}`;
                    
                    showLoading("Getting weather for your location...");
                    await fetchWeatherData(coordinates);
                },
                (error) => {
                    console.error("Geolocation error:", error);
                    let errorMessage = "Unable to get your location. ";
                    
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            errorMessage += "Please enable location access and try again.";
                            break;
                        case error.POSITION_UNAVAILABLE:
                            errorMessage += "Location information is unavailable.";
                            break;
                        case error.TIMEOUT:
                            errorMessage += "Location request timed out.";
                            break;
                        default:
                            errorMessage += "Please search for a city manually.";
                            break;
                    }
                    
                    showError(errorMessage);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 600000 // 10 minutes
                }
            );
        }

        // Update time every minute
        setInterval(updateDateTime, 60000);
    </script>
                        </div>

                    </div>
                </div>
            </div>



            <%- include('../partials/_footer.ejs') %>
                <!-- plugins:js -->
                <script src="vendors/js/vendor.bundle.base.js"></script>
                <!-- endinject -->
                <!-- Plugin js for this page -->
                <script src="vendors/chart.js/Chart.min.js"></script>
                <script src="vendors/datatables.net/jquery.dataTables.js"></script>
                <script src="vendors/datatables.net-bs4/dataTables.bootstrap4.js"></script>
                <script src="js/dataTables.select.min.js"></script>

                <!-- End plugin js for this page -->
                <!-- inject:js -->
                <script src="js/off-canvas.js"></script>
                <script src="js/hoverable-collapse.js"></script>
                <script src="js/template.js"></script>
                <script src="js/settings.js"></script>
                <script src="js/todolist.js"></script>
                <!-- endinject -->
                <!-- Custom js for this page-->
                <script src="js/dashboard.js"></script>
                <script src="js/Chart.roundedBarCharts.js"></script>
                <!-- End custom js for this page-->
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</body>

</html>