<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Verify OTP - ClickOpticx</title>
  
  <!-- External CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <style>
    :root {
      --primary-color: #4B49AC;
      --primary-dark: #3d3890;
      --primary-light: #6c63ac;
      --secondary-color: #00cec9;
      --success-color: #28a745;
      --danger-color: #dc3545;
      --warning-color: #ffc107;
      --info-color: #17a2b8;
      --light-color: #f8f9fa;
      --dark-color: #343a40;
      --border-color: #dee2e6;
      --shadow-color: rgba(75, 73, 172, 0.15);
      --text-muted: #6c757d;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 10px;
      overflow: hidden;
    }

    .verify-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      max-width: 450px;
      width: 100%;
      position: relative;
      max-height: 95vh;
      display: flex;
      flex-direction: column;
    }

    .verify-header {
      background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
      color: white;
      padding: 1.5rem 1.5rem 1rem;
      text-align: center;
      position: relative;
      flex-shrink: 0;
    }

    .verify-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
      opacity: 0.3;
    }

    .verify-header h1 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
      position: relative;
      z-index: 1;
    }

    .verify-header p {
      font-size: 0.85rem;
      opacity: 0.9;
      margin-bottom: 0;
      position: relative;
      z-index: 1;
    }

    .verify-icon {
      width: 60px;
      height: 60px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 0.75rem;
      backdrop-filter: blur(10px);
      border: 2px solid rgba(255, 255, 255, 0.1);
      position: relative;
      z-index: 1;
    }

    .verify-icon i {
      font-size: 1.5rem;
      color: white;
    }

    .verify-body {
      padding: 1.5rem;
      flex: 1;
      overflow-y: auto;
    }

    .step-indicator {
      display: flex;
      justify-content: center;
      margin-bottom: 1.25rem;
    }

    .step {
      width: 35px;
      height: 35px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 0.85rem;
      margin: 0 0.4rem;
      transition: all 0.3s ease;
    }

    .step.active {
      background: var(--primary-color);
      color: white;
      box-shadow: 0 4px 15px var(--shadow-color);
    }

    .step.inactive {
      background: var(--light-color);
      color: var(--text-muted);
      border: 2px solid var(--border-color);
    }

    .form-section {
      margin-bottom: 1.25rem;
    }

    .form-section-title {
      font-size: 0.95rem;
      font-weight: 600;
      color: var(--dark-color);
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
    }

    .form-section-title i {
      margin-right: 0.5rem;
      color: var(--primary-color);
    }

    .otp-container {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin: 1rem 0;
      flex-wrap: wrap;
    }

    .otp-box {
      width: 45px !important;
      height: 45px !important;
      border: 2px solid var(--border-color) !important;
      border-radius: 10px !important;
      text-align: center !important;
      font-size: 1.25rem !important;
      font-weight: 600 !important;
      color: var(--dark-color) !important;
      background: white !important;
      transition: all 0.3s ease !important;
      outline: none !important;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05) !important;
    }

    .otp-box:focus {
      border-color: var(--primary-color) !important;
      box-shadow: 0 0 0 3px var(--shadow-color) !important;
      transform: translateY(-2px) !important;
    }

    .otp-box.filled {
      border-color: var(--success-color) !important;
      background: rgba(40, 167, 69, 0.05) !important;
    }

    .password-container {
      position: relative;
      margin-top: 0.75rem;
    }

    .form-control {
      border: 2px solid var(--border-color);
      border-radius: 10px;
      padding: 0.625rem 0.875rem;
      font-size: 0.95rem;
      transition: all 0.3s ease;
      background: white;
      height: auto;
    }

    .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px var(--shadow-color);
      outline: none;
    }

    .password-toggle {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: var(--text-muted);
      cursor: pointer;
      padding: 5px;
      border-radius: 6px;
      transition: all 0.2s ease;
    }

    .password-toggle:hover {
      color: var(--primary-color);
      background: rgba(75, 73, 172, 0.1);
    }

    .password-strength {
      margin-top: 0.4rem;
      font-size: 0.8rem;
    }

    .strength-bar {
      height: 3px;
      border-radius: 2px;
      background: var(--light-color);
      margin-top: 0.2rem;
      overflow: hidden;
    }

    .strength-fill {
      height: 100%;
      transition: all 0.3s ease;
      border-radius: 2px;
    }

    .strength-weak { width: 25%; background: var(--danger-color); }
    .strength-fair { width: 50%; background: var(--warning-color); }
    .strength-good { width: 75%; background: var(--info-color); }
    .strength-strong { width: 100%; background: var(--success-color); }

    .btn-verify {
      background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
      border: none;
      border-radius: 10px;
      padding: 0.75rem 1.5rem;
      font-weight: 600;
      font-size: 0.95rem;
      color: white;
      width: 100%;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .btn-verify:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px var(--shadow-color);
    }

    .btn-verify:active {
      transform: translateY(0);
    }

    .btn-verify:focus {
      outline: none;
      box-shadow: 0 0 0 3px var(--shadow-color);
    }

    .btn-verify .spinner {
      display: none;
      margin-right: 0.5rem;
    }

    .btn-verify.loading .spinner {
      display: inline-block;
    }

    .btn-verify.loading .btn-text {
      opacity: 0.7;
    }

    .form-footer {
      text-align: center;
      margin-top: 1.25rem;
      padding-top: 1rem;
      border-top: 1px solid var(--border-color);
    }

    .form-footer p {
      color: var(--text-muted);
      font-size: 0.85rem;
      margin-bottom: 0.4rem;
    }

    .form-footer a {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .form-footer a:hover {
      color: var(--primary-dark);
      text-decoration: underline;
    }

    .alert {
      border: none;
      border-radius: 12px;
      padding: 1rem 1.25rem;
      margin-bottom: 1.5rem;
      font-size: 0.9rem;
      border-left: 4px solid;
    }

    .alert-success {
      background: rgba(40, 167, 69, 0.1);
      color: var(--success-color);
      border-left-color: var(--success-color);
    }

    .alert-danger {
      background: rgba(220, 53, 69, 0.1);
      color: var(--danger-color);
      border-left-color: var(--danger-color);
    }

    .form-label {
      font-weight: 500;
      color: var(--dark-color);
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
    }

    .requirements-list {
      font-size: 0.75rem;
      color: var(--text-muted);
      margin-top: 0.4rem;
      padding-left: 1rem;
    }

    .requirements-list li {
      margin-bottom: 0.15rem;
      transition: all 0.2s ease;
    }

    .requirements-list li.valid {
      color: var(--success-color);
    }

    .requirements-list li.valid::marker {
      content: 'âœ“ ';
    }

    @media (max-width: 576px) {
      body {
        padding: 5px;
      }

      .verify-container {
        border-radius: 14px;
        max-height: 98vh;
      }

      .verify-body {
        padding: 1rem;
      }

      .otp-container {
        gap: 6px;
      }

      .otp-box {
        width: 40px !important;
        height: 40px !important;
        font-size: 1.1rem !important;
      }

      .verify-header {
        padding: 1rem 1rem 0.75rem;
      }

      .verify-header h1 {
        font-size: 1.3rem;
      }

      .verify-header p {
        font-size: 0.8rem;
      }

      .form-section {
        margin-bottom: 1rem;
      }

      .form-footer {
        margin-top: 1rem;
        padding-top: 0.75rem;
      }
    }

    .fade-in {
      animation: fadeIn 0.6s ease-in;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .bounce-in {
      animation: bounceIn 0.6s ease-out;
    }

    @keyframes bounceIn {
      0% {
        opacity: 0;
        transform: scale(0.3);
      }
      50% {
        opacity: 1;
        transform: scale(1.05);
      }
      70% {
        transform: scale(0.9);
      }
      100% {
        opacity: 1;
        transform: scale(1);
      }
    }
  </style>
</head>

<body>
  <div class="verify-container fade-in">
    <!-- Header -->
    <div class="verify-header">
      <div class="verify-icon bounce-in">
        <i class="fas fa-shield-alt"></i>
      </div>
      <h1>Verify Your Identity</h1>
      <p>Enter the OTP sent to your email and create a new password</p>
    </div>

    <!-- Body -->
    <div class="verify-body">
      <!-- Step Indicator -->
      <div class="step-indicator">
        <div class="step active">1</div>
        <div class="step active">2</div>
      </div>

      <!-- Form -->
      <form action="/verify-otp" method="POST" id="verifyForm">
        <input type="hidden" name="email" value="<%= email %>">

        <!-- OTP Section -->
        <div class="form-section">
          <div class="form-section-title">
            <i class="fas fa-key"></i>
            Enter Verification Code
          </div>
          <p class="text-muted" style="font-size: 0.85rem; margin-bottom: 0.75rem;">
            Enter the 6-digit code sent to your email
          </p>
          
          <div class="otp-container">
            <input type="text" class="otp-box" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off">
            <input type="text" class="otp-box" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off">
            <input type="text" class="otp-box" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off">
            <input type="text" class="otp-box" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off">
            <input type="text" class="otp-box" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off">
            <input type="text" class="otp-box" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off">
            <input type="hidden" id="otp" name="otp" required>
          </div>
        </div>

        <!-- Password Section -->
        <div class="form-section">
          <div class="form-section-title">
            <i class="fas fa-lock"></i>
            Create New Password
          </div>
          
          <div class="password-container">
            <label for="newPassword" class="form-label">New Password</label>
            <input type="password" id="newPassword" name="newPassword" class="form-control" 
                   placeholder="Enter your new password" required autocomplete="new-password">
            <button type="button" class="password-toggle" id="togglePassword">
              <i class="fas fa-eye-slash"></i>
            </button>
          </div>

          <!-- Password Strength Indicator -->
          <div class="password-strength">
            <div class="d-flex justify-content-between align-items-center">
              <span class="strength-text">Password Strength:</span>
              <span class="strength-label" id="strengthLabel">Enter password</span>
            </div>
            <div class="strength-bar">
              <div class="strength-fill" id="strengthFill"></div>
            </div>
          </div>

          <!-- Password Requirements -->
          <ul class="requirements-list" id="requirements">
            <li id="length">At least 8 characters</li>
            <li id="uppercase">One uppercase letter</li>
            <li id="lowercase">One lowercase letter</li>
            <li id="number">One number</li>
            <li id="special">One special character</li>
          </ul>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn-verify" id="submitBtn">
          <span class="spinner">
            <i class="fas fa-spinner fa-spin"></i>
          </span>
          <span class="btn-text">
            <i class="fas fa-check-circle"></i>
            Reset Password
          </span>
        </button>

        <!-- Footer -->
        <div class="form-footer">
          <p>Didn't receive the code?</p>
          <a href="/forgot-password" id="resendLink">Request new code</a>
        </div>
      </form>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // OTP Input Handling
      const otpBoxes = document.querySelectorAll('.otp-box');
      const hiddenOtpInput = document.getElementById('otp');
      const passwordInput = document.getElementById('newPassword');
      const toggleButton = document.getElementById('togglePassword');
      const submitBtn = document.getElementById('submitBtn');
      const form = document.getElementById('verifyForm');

      // OTP Functionality
      otpBoxes.forEach((box, index) => {
        box.addEventListener('input', function(e) {
          const value = e.target.value;
          
          // Only allow numbers
          if (!/^\d$/.test(value)) {
            e.target.value = '';
            return;
          }

          // Add filled class for styling
          if (value) {
            e.target.classList.add('filled');
          } else {
            e.target.classList.remove('filled');
          }

          // Move to next box
          if (value && index < otpBoxes.length - 1) {
            otpBoxes[index + 1].focus();
          }

          updateHiddenOtp();
        });

        box.addEventListener('keydown', function(e) {
          // Move to previous box on backspace
          if (e.key === 'Backspace') {
            if (!e.target.value && index > 0) {
              otpBoxes[index - 1].focus();
              otpBoxes[index - 1].value = '';
              otpBoxes[index - 1].classList.remove('filled');
            } else {
              e.target.value = '';
              e.target.classList.remove('filled');
            }
            updateHiddenOtp();
          }
          
          // Move with arrow keys
          if (e.key === 'ArrowLeft' && index > 0) {
            otpBoxes[index - 1].focus();
          } else if (e.key === 'ArrowRight' && index < otpBoxes.length - 1) {
            otpBoxes[index + 1].focus();
          }
        });

        box.addEventListener('paste', function(e) {
          e.preventDefault();
          const pastedData = e.clipboardData.getData('text');
          const digits = pastedData.replace(/\D/g, '').slice(0, 6);
          
          digits.split('').forEach((digit, i) => {
            if (i < otpBoxes.length) {
              otpBoxes[i].value = digit;
              otpBoxes[i].classList.add('filled');
            }
          });
          
          updateHiddenOtp();
          
          // Focus next empty box or password field
          const nextEmpty = Array.from(otpBoxes).findIndex(box => !box.value);
          if (nextEmpty === -1) {
            passwordInput.focus();
          } else {
            otpBoxes[nextEmpty].focus();
          }
        });

        box.addEventListener('focus', function() {
          this.select();
        });
      });

      function updateHiddenOtp() {
        const otpValue = Array.from(otpBoxes).map(box => box.value).join('');
        hiddenOtpInput.value = otpValue;
        
        // Enable/disable submit button based on completion
        const isOtpComplete = otpValue.length === 6;
        const isPasswordValid = passwordInput.value.length >= 8;
        submitBtn.disabled = !(isOtpComplete && isPasswordValid);
      }

      // Password Toggle
      toggleButton.addEventListener('click', function() {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        
        const icon = this.querySelector('i');
        if (type === 'text') {
          icon.classList.remove('fa-eye-slash');
          icon.classList.add('fa-eye');
        } else {
          icon.classList.remove('fa-eye');
          icon.classList.add('fa-eye-slash');
        }
      });

      // Password Strength Checker
      passwordInput.addEventListener('input', function() {
        const password = this.value;
        const requirements = {
          length: password.length >= 8,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /\d/.test(password),
          special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
        };

        // Update requirement list
        Object.keys(requirements).forEach(req => {
          const element = document.getElementById(req);
          if (requirements[req]) {
            element.classList.add('valid');
          } else {
            element.classList.remove('valid');
          }
        });

        // Calculate strength
        const validCount = Object.values(requirements).filter(Boolean).length;
        const strengthFill = document.getElementById('strengthFill');
        const strengthLabel = document.getElementById('strengthLabel');

        strengthFill.className = 'strength-fill';
        
        if (password.length === 0) {
          strengthLabel.textContent = 'Enter password';
        } else if (validCount <= 2) {
          strengthFill.classList.add('strength-weak');
          strengthLabel.textContent = 'Weak';
        } else if (validCount <= 3) {
          strengthFill.classList.add('strength-fair');
          strengthLabel.textContent = 'Fair';
        } else if (validCount <= 4) {
          strengthFill.classList.add('strength-good');
          strengthLabel.textContent = 'Good';
        } else {
          strengthFill.classList.add('strength-strong');
          strengthLabel.textContent = 'Strong';
        }

        updateHiddenOtp(); // Check if form should be enabled
      });

      // Form Submission
      form.addEventListener('submit', function(e) {
        const otpValue = hiddenOtpInput.value;
        const passwordValue = passwordInput.value;

        if (otpValue.length !== 6) {
          e.preventDefault();
          alert('Please enter the complete 6-digit OTP');
          otpBoxes[0].focus();
          return;
        }

        if (passwordValue.length < 8) {
          e.preventDefault();
          alert('Password must be at least 8 characters long');
          passwordInput.focus();
          return;
        }

        // Show loading state
        submitBtn.classList.add('loading');
        submitBtn.disabled = true;
      });

      // Auto-focus first OTP box
      otpBoxes[0].focus();

      // Resend link cooldown
      let resendCooldown = 0;
      const resendLink = document.getElementById('resendLink');
      
      function startCooldown() {
        resendCooldown = 60;
        resendLink.style.pointerEvents = 'none';
        resendLink.style.opacity = '0.5';
        
        const interval = setInterval(() => {
          resendLink.textContent = `Resend in ${resendCooldown}s`;
          resendCooldown--;
          
          if (resendCooldown < 0) {
            clearInterval(interval);
            resendLink.textContent = 'Request new code';
            resendLink.style.pointerEvents = 'auto';
            resendLink.style.opacity = '1';
          }
        }, 1000);
      }

      resendLink.addEventListener('click', function(e) {
        if (resendCooldown > 0) {
          e.preventDefault();
          return;
        }
        startCooldown();
      });
    });
  </script>
</body>

</html>