<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Pending Payments by User</title>
  
  <!-- CSS Libraries -->
  <link rel="stylesheet" href="/vendors/css/vendor.bundle.base.css">
  <link rel="stylesheet" href="/css/vertical-layout-light/style.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link rel="shortcut icon" href="/images/favicon.png" />

  <style>
    :root {
      --primary: #6c5ce7;
      --success: #00b894;
      --warning: #fdcb6e;
      --danger: #d63031;
      --dark: #2d3436;
      --light: #f5f6fa;
    }

    body {
      background: var(--light);
      color: var(--dark);
      overflow-x: hidden;
    }

    .main-panel {
      flex-grow: 1;
      padding: 20px;
    }

    @media (max-width: 991px) {
      .main-panel {
        margin-left: 0;
        padding: 10px;
      }
    }

    /* ===== MOBILE CARD LAYOUT ===== */
    @media (max-width: 768px) {
      .desktop-table {
        display: none !important;
      }
      
      .mobile-cards {
        display: block !important;
      }
    }
    
    @media (min-width: 769px) {
      .desktop-table {
        display: block !important;
      }
      
      .mobile-cards {
        display: none !important;
      }
    }
    
    .mobile-cards {
      display: none;
    }
    
    .user-payment-card {
      background: white;
      border-radius: 12px;
      padding: 15px;
      margin-bottom: 15px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      border: 1px solid #e0e0e0;
      position: relative;
    }
    
    .user-payment-card::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      background: var(--warning);
      border-radius: 12px 0 0 12px;
    }

    .user-payment-card-header {
      display: flex;
      align-items: center;
      margin-bottom: 12px;
      padding-bottom: 12px;
      border-bottom: 1px solid #f0f0f0;
    }

    .user-payment-card-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--warning);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 12px;
      font-size: 1.2rem;
      font-weight: 600;
    }

    .user-payment-card-content {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 10px;
    }

    .user-payment-card-field {
      display: flex;
      flex-direction: column;
    }

    .user-payment-card-label {
      font-size: 0.75rem;
      color: #888;
      margin-bottom: 2px;
      text-transform: uppercase;
      font-weight: 500;
    }

    .user-payment-card-value {
      font-size: 0.9rem;
      color: #333;
      font-weight: 500;
    }

    .card {
      background: #ffffff;
      border-radius: 12px;
      box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
      border: none;
      overflow: hidden;
      margin-bottom: 30px;
    }

    .card-header {
      background: linear-gradient(90deg, var(--warning), #f39c12);
      color: white;
      padding: 20px 25px;
      font-size: 1.4rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .toolbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 25px;
      flex-wrap: wrap;
      gap: 15px;
    }

    .search-box {
      position: relative;
      flex: 1;
      max-width: 350px;
    }

    .search-box i {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #9e9e9e;
    }

    .search-input {
      width: 100%;
      padding: 12px 15px 12px 45px;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      font-size: 0.95rem;
    }

    .filter-group {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .filter-select {
      padding: 10px 15px;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      font-size: 0.95rem;
      background: white;
      cursor: pointer;
    }

    .btn-export {
      background: var(--primary);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
    }

    .table-responsive {
      overflow-x: auto;
      border-radius: 10px;
      background: white;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      min-width: 800px;
    }

    .table th {
      background-color: #fff8e1;
      color: var(--warning);
      font-weight: 600;
      padding: 16px 20px;
      text-align: left;
      border-bottom: 1px solid #e0e0e0;
    }

    .table td {
      padding: 14px 20px;
      border-bottom: 1px solid #f0f0f0;
      vertical-align: middle;
    }

    .amount-highlight {
      font-weight: 600;
      color: var(--warning);
    }

    .stats-overview {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 25px;
    }

    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      border-left: 4px solid;
    }

    .stat-card.total { border-left-color: var(--primary); }
    .stat-card.users { border-left-color: var(--warning); }
    .stat-card.amount { border-left-color: var(--danger); }

    .stat-number {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 5px;
    }

    .stat-label {
      color: #666;
      font-size: 0.9rem;
    }

    @media (max-width: 576px) {
      .toolbar {
        flex-direction: column;
        align-items: stretch;
      }
      
      .filter-group {
        justify-content: space-between;
      }
    }
  </style>
</head>

<body>
  <div class="container-scroller">
    <%- include('../partials/_navbar.ejs') %>
    
    <div class="container-fluid page-body-wrapper" style="padding-left: 0px; padding-right: 0px;">
      <%- include('../partials/SettingsDow.ejs') %>
      <%- include('../partials/Sidebar.ejs') %>
      
      <div class="main-panel" style="width: 100%;">
        <div class="content-wrapper">
          <div class="card">
            <div class="card-header">
              <i class="fas fa-user-clock me-2"></i>
              Detailed Pending Payments by User
            </div>
            
            <div class="card-body">
              <!-- Statistics Overview -->
              <div class="stats-overview" id="stats-overview">
                <!-- Stats will be populated by JavaScript -->
              </div>

              <div class="toolbar">
                <div class="search-box">
                  <i class="fas fa-search"></i>
                  <input type="text" id="search-input" class="search-input" 
                         placeholder="Search by user, package, transaction...">
                </div>
                
                <div class="filter-group">
                  <select id="package-filter" class="filter-select">
                    <option value="">All Packages</option>
                  </select>
                  
                  <select id="amount-filter" class="filter-select">
                    <option value="">All Amounts</option>
                    <option value="high">High (>5000)</option>
                    <option value="medium">Medium (1000-5000)</option>
                    <option value="low">Low (<1000)</option>
                  </select>
                  
                  <button id="export-btn" class="btn-export">
                    <i class="fas fa-file-excel me-2"></i>Export
                  </button>
                </div>
              </div>

              <!-- Desktop Table View -->
              <div class="desktop-table">
                <div class="table-responsive">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>User ID</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Payment ID</th>
                        <th>Package Name</th>
                        <th>Amount</th>
                        <th>Custom Amount</th>
                        <th>Transaction ID</th>
                        <th>Created Date</th>
                      </tr>
                    </thead>
                    <tbody id="payments-table">
                      <!-- Data will be loaded from controller -->
                      <% if (typeof payments !== 'undefined' && payments.length > 0) { %>
                        <% payments.forEach(payment => { %>
                          <tr>
                            <td>#<%= payment.user_id %></td>
                            <td><%= payment.Username %></td>
                            <td><%= payment.Email %></td>
                            <td>#<%= payment.payment_id %></td>
                            <td><%= payment.package_name %></td>
                            <td class="amount-highlight">PKR <%= payment.amount %></td>
                            <td class="amount-highlight">PKR <%= payment.custom_amount %></td>
                            <td><%= payment.transaction_id %></td>
                            <td><%= new Date(payment.created_at).toLocaleDateString() %></td>
                          </tr>
                        <% }) %>
                      <% } else { %>
                        <tr>
                          <td colspan="9" class="billing-table-empty">
                            <i class="fas fa-inbox"></i>
                            <h6>No Pending Payments Found</h6>
                            <p>All payments are up to date!</p>
                          </td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
              </div>

              <!-- Mobile Cards View -->
              <div class="mobile-cards" id="payments-cards">
                <% if (typeof payments !== 'undefined' && payments.length > 0) { %>
                  <% payments.forEach(payment => { %>
                    <div class="user-payment-card">
                      <div class="user-payment-card-header">
                        <div class="user-payment-card-avatar">
                          <%= payment.Username.charAt(0).toUpperCase() %>
                        </div>
                        <div class="user-payment-card-name">
                          <h6><%= payment.Username %></h6>
                          <p><%= payment.Email %></p>
                        </div>
                      </div>
                      
                      <div class="user-payment-card-content">
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">User ID</div>
                          <div class="user-payment-card-value">#<%= payment.user_id %></div>
                        </div>
                        
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">Payment ID</div>
                          <div class="user-payment-card-value">#<%= payment.payment_id %></div>
                        </div>
                        
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">Package</div>
                          <div class="user-payment-card-value"><%= payment.package_name %></div>
                        </div>
                        
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">Amount</div>
                          <div class="user-payment-card-value amount-highlight">PKR <%= payment.amount %></div>
                        </div>
                        
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">Custom Amount</div>
                          <div class="user-payment-card-value amount-highlight">PKR <%= payment.custom_amount %></div>
                        </div>
                        
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">Transaction ID</div>
                          <div class="user-payment-card-value"><%= payment.transaction_id %></div>
                        </div>
                        
                        <div class="user-payment-card-field">
                          <div class="user-payment-card-label">Created Date</div>
                          <div class="user-payment-card-value"><%= new Date(payment.created_at).toLocaleDateString() %></div>
                        </div>
                      </div>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="billing-empty-state">
                    <i class="fas fa-inbox"></i>
                    <h5>No Pending Payments Found</h5>
                    <p>All payments are up to date!</p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/off-canvas.js"></script>
  <script src="/js/billing-payments-common.js"></script>
  <script>
    // Get payments data from server-side rendering
    const paymentsData = <%- JSON.stringify(typeof payments !== 'undefined' ? payments : []) %>;
    
    // Update statistics
    function updateStatistics() {
      const totalPayments = paymentsData.length;
      const uniqueUsers = new Set(paymentsData.map(p => p.user_id)).size;
      const totalAmount = paymentsData.reduce((sum, p) => sum + (parseFloat(p.amount) || 0), 0);
      
      document.getElementById('stats-overview').innerHTML = `
        <div class="stat-card total">
          <div class="stat-number" style="color: var(--primary)">${totalPayments}</div>
          <div class="stat-label">Total Pending Payments</div>
        </div>
        <div class="stat-card users">
          <div class="stat-number" style="color: var(--warning)">${uniqueUsers}</div>
          <div class="stat-label">Users with Pending Payments</div>
        </div>
        <div class="stat-card amount">
          <div class="stat-number" style="color: var(--danger)">PKR ${totalAmount.toLocaleString()}</div>
          <div class="stat-label">Total Pending Amount</div>
        </div>
      `;
    }

    // Populate package filter
    function populatePackageFilter() {
      const packages = [...new Set(paymentsData.map(p => p.package_name))];
      const filterSelect = document.getElementById('package-filter');
      
      packages.forEach(pkg => {
        const option = document.createElement('option');
        option.value = pkg;
        option.textContent = pkg;
        filterSelect.appendChild(option);
      });
    }

    // Search functionality
    document.getElementById('search-input').addEventListener('input', function(e) {
      const searchTerm = e.target.value.toLowerCase();
      const rows = document.querySelectorAll('#payments-table tr');
      const cards = document.querySelectorAll('.user-payment-card');
      
      // Filter table rows
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? '' : 'none';
      });
      
      // Filter mobile cards
      cards.forEach(card => {
        const text = card.textContent.toLowerCase();
        card.style.display = text.includes(searchTerm) ? '' : 'none';
      });
    });

    // Package filter
    document.getElementById('package-filter').addEventListener('change', function(e) {
      const selectedPackage = e.target.value;
      const rows = document.querySelectorAll('#payments-table tr');
      const cards = document.querySelectorAll('.user-payment-card');
      
      rows.forEach(row => {
        if (!selectedPackage) {
          row.style.display = '';
        } else {
          const packageCell = row.cells[4];
          if (packageCell && packageCell.textContent.includes(selectedPackage)) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        }
      });
      
      // Similar logic for mobile cards would go here
    });

    // Amount filter
    document.getElementById('amount-filter').addEventListener('change', function(e) {
      const amountRange = e.target.value;
      const rows = document.querySelectorAll('#payments-table tr');
      
      rows.forEach(row => {
        if (!amountRange) {
          row.style.display = '';
          return;
        }
        
        const amountCell = row.cells[5];
        if (amountCell) {
          const amount = parseFloat(amountCell.textContent.replace(/[^\d.-]/g, ''));
          let show = false;
          
          switch(amountRange) {
            case 'high': show = amount > 5000; break;
            case 'medium': show = amount >= 1000 && amount <= 5000; break;
            case 'low': show = amount < 1000; break;
          }
          
          row.style.display = show ? '' : 'none';
        }
      });
    });

    // Export functionality
    document.getElementById('export-btn').addEventListener('click', function() {
      const csvContent = [
        ['User ID', 'Username', 'Email', 'Payment ID', 'Package Name', 'Amount', 'Custom Amount', 'Transaction ID', 'Created Date'],
        ...paymentsData.map(payment => [
          payment.user_id,
          payment.Username,
          payment.Email,
          payment.payment_id,
          payment.package_name,
          payment.amount,
          payment.custom_amount,
          payment.transaction_id,
          new Date(payment.created_at).toLocaleDateString()
        ])
      ].map(row => row.join(',')).join('\n');
      
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `pending-payments-by-user-${new Date().toISOString().split('T')[0]}.csv`;
      a.click();
      window.URL.revokeObjectURL(url);
    });

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      updateStatistics();
      populatePackageFilter();
    });
  </script>
</body>
</html>