
<style>
  /* Navbar Theme Variables */
  :root {
    --navbar-bg: #FFFFFF;
    --navbar-text: #1E293B;
    --navbar-border: #E2E8F0;
  }

  [data-theme="dark"] {
    --navbar-bg: #0F172A !important;
    --navbar-text: #F8FAFC !important;
    --navbar-border: #334155 !important;
  }

  /* Navbar Theme Support */
.navbar {
  background: var(--navbar-bg) !important;
  transition: all 0.3s ease;
  border-bottom: 1px solid var(--navbar-border) !important;
}

.navbar-brand-wrapper {
  background: var(--navbar-bg) !important;
  border-right: 1px solid var(--navbar-border) !important;
}

.navbar-menu-wrapper {
  background: var(--navbar-bg) !important;
}

/* Navbar text and elements */
.navbar .font-weight-bold {
  color: var(--navbar-text) !important;
}

.navbar .navbar-toggler,
.mobile-toggle-btn {
  border: none !important;
  background: transparent !important;
  color: var(--navbar-text) !important;
  font-size: 1.5rem !important;
  padding: 0.25rem 0.5rem !important;
  transition: all 0.3s ease;
}




.navbar .navbar-toggler:hover,
.mobile-toggle-btn:hover {
  color: var(--primary-color, #4F46E5) !important;
  transform: scale(1.1);
}

.navbar .navbar-toggler i,
.mobile-toggle-btn i {
  color: inherit !important;
}

/* Icon menu styling */
.icon-menu {
  color: var(--navbar-text) !important;
}

/* Navigation items */
.navbar .nav-item {
  color: var(--navbar-text) !important;
}

/* Dropdown menu dark theme support */
[data-theme="dark"] .dropdown-menu {
  background: var(--card-bg, #1E293B) !important;
  border: 1px solid var(--border-primary, #334155) !important;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2) !important;
}

[data-theme="dark"] .dropdown-item {
  color: var(--text-primary, #F8FAFC) !important;
}

[data-theme="dark"] .dropdown-item:hover,
[data-theme="dark"] .dropdown-item:focus {
  background: var(--bg-tertiary, #334155) !important;
  color: var(--text-primary, #F8FAFC) !important;
}

[data-theme="dark"] .dropdown-header {
  color: var(--text-primary, #F8FAFC) !important;
}

/* Notification specific styling */
[data-theme="dark"] .preview-item {
  border-bottom: 1px solid var(--border-primary, #334155) !important;
}

[data-theme="dark"] .preview-item-content {
  color: var(--text-secondary, #94A3B8) !important;
}

[data-theme="dark"] .text-muted {
  color: var(--text-secondary, #64748B) !important;
}

/* Profile dropdown dark theme */
[data-theme="dark"] .nav-profile img {
  border: 2px solid var(--border-primary, #334155);
}

/* Icon colors in dark theme */
.navbar .icon-bell,
.navbar .ti-settings,
.navbar .ti-power-off {
  color: var(--navbar-text) !important;
}

/* Notification badge */
.navbar .count {
  background: var(--danger-color, #EF4444) !important;
  color: white !important;
}

/* Profile image in navbar */
.navbar .nav-profile img {
  border: 2px solid var(--navbar-border) !important;
  transition: all 0.3s ease;
}

.navbar .nav-profile img:hover {
  border-color: var(--primary-color, #4F46E5) !important;
}

.logo-img {
  width: 140px;
  height: 50px;
  object-fit: contain;
  object-position: center;
  display: block;
}
[data-theme="dark"] .logo-img {
  transform: scale(1.15);  /* ✅ Slight zoom to match size visually */
  transform-origin: center;
}


@media (max-width: 768px) {
  .logo-img {
    max-height: 40px; /* slightly smaller on tablet */
  }
}
@media (max-width: 576px) {
  .logo-img {
    max-height: 30px; /* smaller on mobile */
  }
}

/* Sidebar Toggle Button */
.sidebar-toggle-btn {
  background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
  border: none;
  color: white;
  padding: 8px 16px;
  border-radius: 25px;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
  margin-left: 15px;
  position: relative;
  overflow: hidden;
}

.sidebar-toggle-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.6s ease;
}

.sidebar-toggle-btn:hover::before {
  left: 100%;
}

.sidebar-toggle-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(79, 70, 229, 0.4);
  color: white;
}

.sidebar-toggle-btn:active {
  transform: translateY(0);
}

@media (max-width: 768px) {
  .sidebar-toggle-btn {
    padding: 6px 12px;
    font-size: 12px;
    margin-left: 10px;
  }
}

/* Speed Test Button in Navbar - Enhanced Professional Style */
.nav-speed-test-btn {
  background: linear-gradient(135deg, #10b981 0%, #047857 100%);
  border: none;
  color: white;
  padding: 8px 16px;
  border-radius: 25px;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
  margin-left: 15px;
  position: relative;
  overflow: hidden;
}

.nav-speed-test-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.6s ease;
}

.nav-speed-test-btn:hover::before {
  left: 100%;
}

.nav-speed-test-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
  color: white;
}

.nav-speed-test-btn:active {
  transform: translateY(0);
}

@media (max-width: 768px) {
  .nav-speed-test-btn {
    padding: 6px 12px;
    font-size: 12px;
    margin-left: 10px;
  }
}

/* Theme Toggle Button */
.theme-toggle-btn {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  border: none;
  color: white;
  padding: 8px 16px;
  border-radius: 25px;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(240, 147, 251, 0.3);
  margin-left: 15px;
  position: relative;
  overflow: hidden;
}

.theme-toggle-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(240, 147, 251, 0.4);
  color: white;
}

.theme-toggle-btn:active {
  transform: translateY(0);
}

.theme-toggle-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.6s ease;
}

.theme-toggle-btn:hover::before {
  left: 100%;
}

.theme-icon {
  transition: all 0.3s ease;
  margin-right: 5px;
}

.theme-text {
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Dark theme toggle button styling */
[data-theme="dark"] .theme-toggle-btn {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

[data-theme="dark"] .theme-toggle-btn:hover {
  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
}

@media (max-width: 768px) {
  .theme-toggle-btn {
    padding: 6px 12px;
    font-size: 12px;
    margin-left: 10px;
  }
  
  .theme-text {
    display: none !important;
  }
}

</style>
<nav class="navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row">
  <div class="text-center navbar-brand-wrapper d-flex align-items-center justify-content-center">
<% 
  const timestamp = Date.now(); 
  const logoUrl = (typeof navImg !== 'undefined' && navImg) ? 
    (navImg.startsWith('http') ? navImg + '?v=' + timestamp : '/uploads/' + navImg + '?v=' + timestamp) : 
    '/images/blacklogo.png';
  const darkLogoUrl = (typeof navImg !== 'undefined' && navImg) ? 
    (navImg.startsWith('http') ? navImg + '?v=' + timestamp : '/uploads/' + navImg + '?v=' + timestamp) : 
    '/images/ClickTake.png';
%>
<img 
  src="<%= logoUrl %>" 
  alt="logo" 
  id="navImgPreview" 
  class="img-fluid logo-img theme-light-logo"
  data-theme-logo-light="<%= logoUrl %>"
  data-theme-logo-dark="<%= darkLogoUrl %>"
/>

    <% if (isAdmin) { %>
      <form action="/index" method="POST" enctype="multipart/form-data" id="navImgForm">
        <label for="navImgInput" style="cursor: pointer;">
          <input type="file" name="navImg" id="navImgInput" style="display: none;"
            onchange="document.getElementById('navImgForm').submit();" />
        </label>
      </form>
      <% } %>
  </div>

  <div class="navbar-menu-wrapper d-flex align-items-center justify-content-end">
    <!-- Mobile Sidebar Toggle -->
    <button class="navbar-toggler d-lg-none mobile-toggle-btn" type="button" data-toggle="offcanvas">
      <i class="fas fa-bars"></i>
    </button>
    
    <!-- Desktop Sidebar Toggle -->
    <button class="navbar-toggler d-none d-lg-block align-self-center" type="button" data-toggle="minimize">
      <span class="icon-menu"></span>
    </button>
    <ul class="navbar-nav mr-lg-2">
      <li class="nav-item nav-search d-none d-lg-block">
        <div class="input-group">
          <form action="/logoTextChange" method="post">
            <!-- <input type="text" name="logo_text">
            <button type="submit">submit</button> -->
            <h4 class="font-weight-bold m-0 mx-auto">
              <%= bg_result[0].logo_text %>
            </h4>
          </form>
        </div>
      </li>
      <li class="nav-item d-lg-none">
        <button id="sidebarToggleBtn" class="btn sidebar-toggle-btn" onclick="toggleSidebar()" title="Toggle Sidebar">
          <i class="fas fa-bars me-1"></i>
          <span>Menu</span>
        </button>
      </li>
      <li class="nav-item">
        <button id="navSpeedTestBtn" class="btn nav-speed-test-btn" data-bs-toggle="modal" data-bs-target="#speedTestModal" title="Start Speed Test">
          <i class="fas fa-tachometer-alt btn-icon"></i>
          <span class="btn-text d-none d-md-inline">Speed Test</span>
        </button>
      </li>
      <li class="nav-item">
        <button id="themeToggleBtn" class="btn theme-toggle-btn" onclick="toggleTheme()" title="Toggle Dark/Light Theme">
          <i class="fas fa-sun theme-icon" id="themeIcon"></i>
          <span class="d-none d-lg-inline theme-text" id="themeText">Light</span>
        </button>
      </li>
    </ul>
    <ul class="navbar-nav navbar-nav-right">
      <% if (isAdmin) { %>
        <li class="nav-item dropdown">
          <a class="nav-link count-indicator dropdown-toggle" id="notificationDropdown" href="#" data-toggle="dropdown">
            <i class="icon-bell mx-0"></i>
            <% if (totalNotifactions> 0) { %>
              <span class="count" style="left: 36%;top:-10px;width: 27px;height: 27px; color: white;">
                <%= totalNotifactions %>
              </span>
              <% } %>
          </a>
          <div class="dropdown-menu dropdown-menu-right navbar-dropdown preview-list"
            aria-labelledby="notificationDropdown">
            <h2 class="mb-0 font-weight-bold dropdown-header">Notifications</h2>

            <div class="notif-scrollable" style="max-height: 300px; overflow-y: auto;">
              <% const notificationData = typeof password_data !== 'undefined' ? password_data : (typeof password_datass !== 'undefined' ? password_datass : []); %>
              <% if (notificationData.length===0) { %>
                <p class="text-muted text-center">No new notifications</p>
                <% } %>

                  <% notificationData.forEach((notif)=> { %>
                    <a href="#" class="dropdown-item preview-item smart-notification" 
                       data-id="<%= notif.id %>"
                       data-username="<%= notif.username || '' %>"
                       data-message="<%= notif.message || '' %>"
                       data-field2="<%= notif.field2 || '' %>"
                       data-package="<%= notif.package_name || '' %>"
                       data-complaint="<%= notif.Complaint || '' %>">
                      <div class="preview-thumbnail">
                        <div class="preview-icon bg-primary">
                          <i class="icon-bell mx-0"></i>
                        </div>
                      </div>
                      <div class="preview-item-content">
                        <p class="font-weight-light small-text mb-0 text-muted">
                          <%= notif.username %>
                        </p>
                        <div class="notification-text">
                          <%= notif.message %><br>
                          <%= notif.field2 %>
                          <%= notif.package_name %>
                          <%= notif.Complaint %>
                        </div>
                        <small class="text-primary"><i class="fas fa-external-link-alt"></i> Click to view details</small>
                      </div>
                    </a>
                    <% }); %>
            </div>
          </div>
        </li>
        <% } %>
          <script>
            // Professional Smart Notification System
            class SmartNotificationHandler {
              constructor() {
                this.init();
              }

              init() {
                document.querySelectorAll(".smart-notification").forEach(item => {
                  item.addEventListener("click", (e) => this.handleNotificationClick(e, item));
                });
              }

              // Intelligent route detection based on notification content
              determineRoute(notificationData) {
                const { message, complaint, package: packageName, field2, username } = notificationData;
                const messageText = (message + ' ' + field2 + ' ' + complaint + ' ' + packageName).toLowerCase();

                // Route mapping based on notification content
                const routeMap = [
                  // User Management Routes
                  { keywords: ['user', 'account', 'registration', 'signup', 'login', 'profile'], route: '/AdminUser' },
                  { keywords: ['password', 'reset', 'forgot', 'security'], route: '/PasswordRequest' },
                  
                  // Package Management Routes
                  { keywords: ['package', 'plan', 'subscription', 'upgrade', 'downgrade'], route: '/package' },
                  { keywords: ['request', 'package request', 'new package'], route: '/request' },
                  
                  // Complaint Management Routes
                  { keywords: ['complaint', 'issue', 'problem', 'support', 'help'], route: '/UserComplaint' },
                  
                  // Payment & Billing Routes
                  { keywords: ['payment', 'billing', 'invoice', 'paid', 'unpaid', 'transaction'], route: '/paymentshistory' },
                  { keywords: ['pending payment', 'due payment'], route: '/pandingpayments' },
                  
                  // Team Management Routes
                  { keywords: ['team', 'staff', 'employee', 'admin'], route: '/AdminTeam' },
                  
                  // Equipment Routes
                  { keywords: ['equipment', 'device', 'router', 'modem'], route: '/userEquipment' },
                  
                  // Default fallback routes
                  { keywords: ['user'], route: '/AdminUser', priority: 1 }
                ];

                // Find matching route
                for (const routeConfig of routeMap) {
                  for (const keyword of routeConfig.keywords) {
                    if (messageText.includes(keyword)) {
                      return routeConfig.route;
                    }
                  }
                }

                // Smart fallback based on data presence
                if (complaint) return '/UserComplaint';
                if (packageName) return '/package';
                if (username && messageText.includes('user')) return '/AdminUser';
                
                // Ultimate fallback
                return '/adminIndex';
              }

              async handleNotificationClick(e, item) {
                e.preventDefault();
                
                // Extract notification data
                const notificationData = {
                  id: item.getAttribute("data-id"),
                  username: item.getAttribute("data-username"),
                  message: item.getAttribute("data-message"),
                  field2: item.getAttribute("data-field2"),
                  package: item.getAttribute("data-package"),
                  complaint: item.getAttribute("data-complaint")
                };

                // Add loading state
                this.addLoadingState(item);

                try {
                  // Mark notification as read
                  const response = await fetch("/mark-one-read", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ id: notificationData.id })
                  });

                  if (response.ok) {
                    // Determine smart route
                    const targetRoute = this.determineRoute(notificationData);
                    
                    // Add success state
                    this.addSuccessState(item);
                    
                    // Navigate after short delay for visual feedback
                    setTimeout(() => {
                      console.log(`🚀 Smart routing to: ${targetRoute} for notification: ${notificationData.message}`);
                      window.location.href = targetRoute;
                    }, 500);
                    
                  } else {
                    this.addErrorState(item);
                    console.error("Failed to mark notification as read");
                  }
                } catch (error) {
                  this.addErrorState(item);
                  console.error("Notification handling error:", error);
                }
              }

              addLoadingState(item) {
                item.style.opacity = '0.7';
                item.style.transform = 'scale(0.98)';
                item.style.transition = 'all 0.3s ease';
                
                const content = item.querySelector('.notification-text');
                if (content) {
                  content.innerHTML = '<i class="fas fa-spinner fa-spin text-primary"></i> Opening...';
                }
              }

              addSuccessState(item) {
                item.style.background = 'linear-gradient(90deg, #10b981, #059669)';
                item.style.color = 'white';
                item.style.transform = 'scale(1.02)';
                
                const content = item.querySelector('.notification-text');
                if (content) {
                  content.innerHTML = '<i class="fas fa-check-circle"></i> Redirecting...';
                }
              }

              addErrorState(item) {
                item.style.background = '#fee2e2';
                item.style.borderLeft = '4px solid #ef4444';
                item.style.transform = 'scale(1)';
                
                const content = item.querySelector('.notification-text');
                if (content) {
                  content.innerHTML = '<i class="fas fa-exclamation-triangle text-danger"></i> Error occurred';
                }
                
                // Reset after 3 seconds
                setTimeout(() => {
                  item.style.background = '';
                  item.style.borderLeft = '';
                  item.style.opacity = '1';
                }, 3000);
              }
            }

            // Initialize smart notification handler when DOM is ready
            document.addEventListener('DOMContentLoaded', () => {
              new SmartNotificationHandler();
            });
          </script>

          <!-- User Dropdown -->
          <% if (isUser) { %>
            <li class="nav-item dropdown">
              <a class="nav-link count-indicator dropdown-toggle" id="notificationDropdown" href="#"
                data-toggle="dropdown">
                <i class="icon-bell mx-0"></i>
                <% if (Notifactions> 0) { %>
                  <span class="count" style="left: 36%;top:-10px;width: 27px;height: 27px; color: white;">
                    <%= Notifactions %>
                  </span>
                  <% } %>
              </a>
              <div class="dropdown-menu dropdown-menu-right navbar-dropdown preview-list"
                aria-labelledby="notificationDropdown">
                <h2 class="mb-0 font-weight-bold dropdown-header">Notifications</h2>

                <div class="notif-scrollable" style="max-height: 300px; overflow-y: auto;">
                  <% if (notifications_users.length===0) { %>
                    <p class="text-muted text-center">No new notifications</p>
                    <% } %>

                      <% notifications_users.forEach((notif)=> { %>
                        <a href="#" class="dropdown-item preview-item smart-user-notification" 
                           data-id="<%= notif.id %>"
                           data-message="<%= notif.message || '' %>">
                          <div class="preview-thumbnail">
                            <div class="preview-icon bg-primary">
                              <i class="icon-bell mx-0"></i>
                            </div>
                          </div>
                          <div class="preview-item-content">
                            <div class="notification-text">
                              <%= notif.message %>
                            </div>
                            <small class="text-primary"><i class="fas fa-external-link-alt"></i> Click to view</small>
                          </div>
                        </a>
                        <% }); %>
                </div>
              </div>
            </li>
            <% } %>

              <script>
                // Smart User Notification Handler
                class SmartUserNotificationHandler {
                  constructor() {
                    this.init();
                  }

                  init() {
                    document.querySelectorAll(".smart-user-notification").forEach(item => {
                      item.addEventListener("click", (e) => this.handleUserNotificationClick(e, item));
                    });
                  }

                  // User-specific route determination
                  determineUserRoute(messageText) {
                    const message = messageText.toLowerCase();

                    // User route mapping
                    const userRoutes = [
                      { keywords: ['package', 'plan', 'subscription'], route: '/package' },
                      { keywords: ['payment', 'billing', 'invoice', 'paid'], route: '/complaint' }, // User wallet page
                      { keywords: ['profile', 'account', 'settings'], route: '/profile' },
                      { keywords: ['password', 'security'], route: '/changepassword' },
                      { keywords: ['support', 'help', 'contact'], route: '/contactus' },
                      { keywords: ['history', 'usage'], route: '/History' }
                    ];

                    // Find matching route
                    for (const routeConfig of userRoutes) {
                      for (const keyword of routeConfig.keywords) {
                        if (message.includes(keyword)) {
                          return routeConfig.route;
                        }
                      }
                    }

                    return '/index'; // User dashboard fallback
                  }

                  async handleUserNotificationClick(e, item) {
                    e.preventDefault();
                    
                    const notificationData = {
                      id: item.getAttribute("data-id"),
                      message: item.getAttribute("data-message")
                    };

                    this.addLoadingState(item);

                    try {
                      const response = await fetch("/mark-one", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: notificationData.id })
                      });

                      if (response.ok) {
                        const targetRoute = this.determineUserRoute(notificationData.message);
                        this.addSuccessState(item);
                        
                        setTimeout(() => {
                          console.log(`🚀 User routing to: ${targetRoute} for: ${notificationData.message}`);
                          window.location.href = targetRoute;
                        }, 500);
                      } else {
                        this.addErrorState(item);
                      }
                    } catch (error) {
                      this.addErrorState(item);
                      console.error("User notification error:", error);
                    }
                  }

                  addLoadingState(item) {
                    item.style.opacity = '0.7';
                    item.style.transform = 'scale(0.98)';
                    item.style.transition = 'all 0.3s ease';
                    
                    const content = item.querySelector('.notification-text');
                    if (content) {
                      content.innerHTML = '<i class="fas fa-spinner fa-spin text-primary"></i> Loading...';
                    }
                  }

                  addSuccessState(item) {
                    item.style.background = 'linear-gradient(90deg, #10b981, #059669)';
                    item.style.color = 'white';
                    item.style.transform = 'scale(1.02)';
                    
                    const content = item.querySelector('.notification-text');
                    if (content) {
                      content.innerHTML = '<i class="fas fa-check-circle"></i> Opening...';
                    }
                  }

                  addErrorState(item) {
                    item.style.background = '#fee2e2';
                    item.style.borderLeft = '4px solid #ef4444';
                    
                    const content = item.querySelector('.notification-text');
                    if (content) {
                      content.innerHTML = '<i class="fas fa-exclamation-triangle text-danger"></i> Error';
                    }
                    
                    setTimeout(() => {
                      item.style.background = '';
                      item.style.borderLeft = '';
                      item.style.opacity = '1';
                    }, 3000);
                  }
                }

                // Initialize user notification handler
                document.addEventListener("DOMContentLoaded", () => {
                  new SmartUserNotificationHandler();
                });
              </script>
              <ul class="navbar-nav navbar-nav-right">
                <li class="nav-item nav-profile dropdown">
                  <a class="nav-link dropdown-toggle" href="#" data-toggle="dropdown" id="profileDropdown">
                    <img
                      src="<%= user && user.user_img ? (user.user_img.startsWith('http') ? user.user_img : '/uploads/' + user.user_img) : '/images/profile-1740414577370.webp' %>"
                      alt="profile" />
                  </a>
                 
                  <div class="dropdown-menu dropdown-menu-right navbar-dropdown" aria-labelledby="profileDropdown">
                      <% if (isUser) { %>
                    <a class="dropdown-item" href="/profile">
                      <i class="ti-settings text-primary"></i> Settings
                    </a>
                     <% } %>
                    <a class="dropdown-item" href="/">
                      <i class="ti-power-off text-primary"></i> Logout
                    </a>
                  </div>
                </li>
              </ul>
              <button class="navbar-toggler navbar-toggler-right d-lg-none align-self-center" type="button"
                data-toggle="offcanvas">
                <span class="icon-menu"></span>
              </button>
  </div>
</nav>

<script>
  document.getElementById("navImgPreview").addEventListener("click", function () {
    document.getElementById("navImgInput").click();
  });

  document.getElementById("navImgInput").addEventListener("change", function () {
    document.getElementById("navImgForm").submit();
  });
</script>

<style>
  .notif-scrollable {
    max-height: 300px;
    overflow-y: auto;
  }

  /* Professional Notification Styling */
  .smart-notification,
  .smart-user-notification {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 8px;
    margin: 4px 8px;
    border-left: 4px solid transparent;
    position: relative;
    overflow: hidden;
  }

  .smart-notification:hover,
  .smart-user-notification:hover {
    background: linear-gradient(90deg, rgba(79, 70, 229, 0.05), rgba(124, 58, 237, 0.05));
    border-left-color: #4F46E5;
    transform: translateX(4px);
    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.15);
  }

  .smart-notification .notification-text,
  .smart-user-notification .notification-text {
    line-height: 1.4;
    margin-bottom: 4px;
  }

  .smart-notification small,
  .smart-user-notification small {
    font-size: 0.75rem;
    opacity: 0.8;
  }

  /* Loading and success states */
  .smart-notification.loading,
  .smart-user-notification.loading {
    pointer-events: none;
  }

  /* Notification count badge enhancement */
  .navbar .count {
    animation: pulse 2s infinite;
    box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  /* Better dropdown styling */
  .navbar-dropdown.preview-list {
    border: none;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    border-radius: 12px;
    overflow: hidden;
  }

  .dropdown-header {
    background: linear-gradient(90deg, #4F46E5, #7C3AED);
    color: white !important;
    padding: 12px 20px;
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .preview-icon {
    border-radius: 8px !important;
    width: 40px !important;
    height: 40px !important;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Dark theme notification support */
  [data-theme="dark"] .navbar-dropdown.preview-list {
    background: #1E293B;
    border: 1px solid #334155;
  }

  [data-theme="dark"] .smart-notification:hover,
  [data-theme="dark"] .smart-user-notification:hover {
    background: linear-gradient(90deg, rgba(79, 70, 229, 0.1), rgba(124, 58, 237, 0.1));
  }
</style>

<!-- Include Speedtest Modal on all pages with navbar -->
<%- include('./speedtest-modal.ejs') %>

<!-- Global Theme System -->
<script>
// Theme management system
class ThemeManager {
  constructor() {
    this.init();
  }

  init() {
    // Get saved theme or default to light
    const savedTheme = localStorage.getItem('clicktake-theme') || 'light';
    this.setTheme(savedTheme, false);
    
    // Update button text and icon
    this.updateThemeButton();
    
    // Listen for system theme changes
    if (window.matchMedia) {
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('clicktake-theme')) {
          this.setTheme(e.matches ? 'dark' : 'light');
        }
      });
    }
    
    // Listen for enhanced theme changes from index.ejs
    window.addEventListener('themeChanged', (e) => {
      this.currentTheme = e.detail.theme;
      this.updateThemeButton();
    });
  }

  setTheme(theme, save = true) {
    // Use the enhanced setTheme function from index.ejs if available
    if (window.setTheme && save) {
      window.setTheme(theme);
      this.updateThemeButton();
      return;
    }
    
    // Fallback: Set theme on document
    document.documentElement.setAttribute('data-theme', theme);
    document.body.setAttribute('data-theme', theme);
    
    // Save to localStorage
    if (save) {
      localStorage.setItem('clicktake-theme', theme);
    }
    
    // Update button
    this.updateThemeButton();
    
    // Dispatch theme change event for other components (including sidebar)
    window.dispatchEvent(new CustomEvent('themeChanged', { 
      detail: { theme },
      bubbles: true 
    }));
    
    // Additional sync for sidebar immediately
    if (window.sidebarThemeManager) {
      window.sidebarThemeManager.syncSidebarSkin(theme);
    }
  }

  getCurrentTheme() {
    return document.documentElement.getAttribute('data-theme') || 'light';
  }

  toggleTheme() {
    const currentTheme = this.getCurrentTheme();
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    this.setTheme(newTheme);
    
    // Add visual feedback
    this.addToggleAnimation();
  }

  updateThemeButton() {
    const themeIcon = document.getElementById('themeIcon');
    const themeText = document.getElementById('themeText');
    const currentTheme = this.getCurrentTheme();
    
    if (themeIcon && themeText) {
      if (currentTheme === 'dark') {
        themeIcon.className = 'fas fa-moon theme-icon';
        themeText.textContent = 'Dark';
      } else {
        themeIcon.className = 'fas fa-sun theme-icon';
        themeText.textContent = 'Light';
      }
    }
  }

  addToggleAnimation() {
    const button = document.getElementById('themeToggleBtn');
    if (button) {
      button.style.transform = 'scale(0.95)';
      setTimeout(() => {
        button.style.transform = '';
      }, 150);
    }
  }
}

// Initialize theme manager
const themeManager = new ThemeManager();

// Global function for button onclick
function toggleTheme() {
  // Use enhanced toggle function if available
  if (window.toggleTheme && window.toggleTheme !== toggleTheme) {
    window.toggleTheme();
    // Update button after enhanced transition
    setTimeout(() => themeManager.updateThemeButton(), 100);
  } else {
    themeManager.toggleTheme();
  }
}

// Make theme manager globally available
window.themeManager = themeManager;

// Connect all sidebar toggle buttons
document.addEventListener('DOMContentLoaded', function() {
  // Connect navbar sidebar toggle button
  const sidebarToggleBtn = document.getElementById('sidebarToggleBtn');
  if (sidebarToggleBtn) {
    sidebarToggleBtn.addEventListener('click', function(e) {
      e.preventDefault();
      if (typeof window.toggleSidebar === 'function') {
        window.toggleSidebar();
      }
    });
  }

  // Connect existing mobile toggle buttons
  const mobileToggleButtons = document.querySelectorAll('[data-toggle="offcanvas"]');
  mobileToggleButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      if (typeof window.toggleSidebar === 'function') {
        window.toggleSidebar();
      }
    });
  });
});
// Make theme manager globally available

  function updateLogoForTheme(theme) {
    const logo = document.getElementById('navImgPreview');
    if (!logo) return;

    const lightLogo = logo.getAttribute('data-theme-logo-light');
    const darkLogo = logo.getAttribute('data-theme-logo-dark');

    logo.src = theme === 'dark' ? darkLogo : lightLogo;
  }

  // On first load
  updateLogoForTheme(themeManager.getCurrentTheme());

  // When theme changes
  window.addEventListener('themeChanged', (e) => {
    updateLogoForTheme(e.detail.theme);
  });

  // Force logo refresh from URL parameters (for logo updates)
  function forceLogoRefresh() {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('logo_updated')) {
      const navbarLogo = document.getElementById('navImgPreview');
      if (navbarLogo) {
        const timestamp = Date.now();
        const currentSrc = navbarLogo.src;
        const baseSrc = currentSrc.split('?')[0];
        navbarLogo.src = baseSrc + '?v=' + timestamp;
        
        // Also update theme logo attributes
        navbarLogo.setAttribute('data-theme-logo-light', baseSrc + '?v=' + timestamp);
        navbarLogo.setAttribute('data-theme-logo-dark', baseSrc + '?v=' + timestamp);
        
        console.log('🔄 Logo force refreshed from URL parameter');
        
        // Remove the parameter from URL to prevent repeated refreshes
        urlParams.delete('logo_updated');
        const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
        window.history.replaceState({}, document.title, newUrl);
      }
    }
  }

  // Auto-refresh on page load
  document.addEventListener('DOMContentLoaded', forceLogoRefresh);

  // Global Profile Photo Update System
  window.globalUpdateNavbarPhoto = function(imageUrl) {
    console.log('🖼️ Updating navbar profile photo to:', imageUrl);
    
    // Update navbar profile image
    const navbarProfileImg = document.querySelector('.navbar .nav-profile img');
    if (navbarProfileImg) {
      navbarProfileImg.src = imageUrl;
      
      // Add subtle animation
      navbarProfileImg.style.transition = 'all 0.3s ease';
      navbarProfileImg.style.transform = 'scale(1.1)';
      setTimeout(() => {
        navbarProfileImg.style.transform = 'scale(1)';
      }, 300);
      
      console.log('✅ Navbar profile photo updated successfully');
    } else {
      console.warn('⚠️ Navbar profile image not found');
    }
    
    // Also update any profile images on the current page
    const pageProfileImages = document.querySelectorAll('.profile-avatar, .avatar-lg, .profile-img');
    pageProfileImages.forEach((img, index) => {
      if (img && img.tagName === 'IMG') {
        img.src = imageUrl;
        console.log(`✅ Updated page profile image ${index + 1}`);
      }
    });
    
    // Store in localStorage for persistence across pages
    localStorage.setItem('currentUserProfileImage', imageUrl);
    localStorage.setItem('profileImageLastUpdated', Date.now().toString());
  };

  // Auto-sync profile photo from localStorage on page load
  document.addEventListener('DOMContentLoaded', function() {
    const storedProfileImage = localStorage.getItem('currentUserProfileImage');
    const lastUpdated = localStorage.getItem('profileImageLastUpdated');
    
    // Only update if image was updated in the last hour (to avoid stale data)
    if (storedProfileImage && lastUpdated) {
      const oneHourAgo = Date.now() - (60 * 60 * 1000);
      if (parseInt(lastUpdated) > oneHourAgo) {
        const navbarProfileImg = document.querySelector('.navbar .nav-profile img');
        if (navbarProfileImg && navbarProfileImg.src !== storedProfileImage) {
          navbarProfileImg.src = storedProfileImage;
          console.log('🔄 Profile photo synced from localStorage');
        }
      }
    }
  });

  // Listen for profile update events from other pages
  window.addEventListener('profilePhotoUpdated', function(e) {
    if (e.detail && e.detail.imageUrl) {
      window.globalUpdateNavbarPhoto(e.detail.imageUrl);
    }
  });

  // Backward compatibility
  window.updateNavbarProfilePhoto = window.globalUpdateNavbarPhoto;

// Speed Test Modal Integration for Navbar
console.log('Speed test navbar integration loaded');



</script>